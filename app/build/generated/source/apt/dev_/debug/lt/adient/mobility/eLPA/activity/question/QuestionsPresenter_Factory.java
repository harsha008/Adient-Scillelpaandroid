// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package lt.adient.mobility.eLPA.activity.question;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import lt.adient.mobility.eLPA.database.AnswerRepository;
import lt.adient.mobility.eLPA.database.AuditRepository;
import lt.adient.mobility.eLPA.database.ChapterRepository;
import lt.adient.mobility.eLPA.database.QuestionRepository;
import lt.adient.mobility.eLPA.database.WorkstationRepository;
import lt.adient.mobility.eLPA.utils.PrefManager;
import lt.adient.mobility.eLPA.ws.SciilAPI;

public final class QuestionsPresenter_Factory implements Factory<QuestionsPresenter> {
  private final MembersInjector<QuestionsPresenter> questionsPresenterMembersInjector;

  private final Provider<AnswerRepository> answerRepositoryProvider;

  private final Provider<AuditRepository> auditRepositoryProvider;

  private final Provider<QuestionRepository> questionRepositoryProvider;

  private final Provider<WorkstationRepository> workstationRepositoryProvider;

  private final Provider<ChapterRepository> chapterRepositoryProvider;

  private final Provider<PrefManager> prefManagerProvider;

  private final Provider<SciilAPI> sciilAPIProvider;

  public QuestionsPresenter_Factory(
      MembersInjector<QuestionsPresenter> questionsPresenterMembersInjector,
      Provider<AnswerRepository> answerRepositoryProvider,
      Provider<AuditRepository> auditRepositoryProvider,
      Provider<QuestionRepository> questionRepositoryProvider,
      Provider<WorkstationRepository> workstationRepositoryProvider,
      Provider<ChapterRepository> chapterRepositoryProvider,
      Provider<PrefManager> prefManagerProvider,
      Provider<SciilAPI> sciilAPIProvider) {
    assert questionsPresenterMembersInjector != null;
    this.questionsPresenterMembersInjector = questionsPresenterMembersInjector;
    assert answerRepositoryProvider != null;
    this.answerRepositoryProvider = answerRepositoryProvider;
    assert auditRepositoryProvider != null;
    this.auditRepositoryProvider = auditRepositoryProvider;
    assert questionRepositoryProvider != null;
    this.questionRepositoryProvider = questionRepositoryProvider;
    assert workstationRepositoryProvider != null;
    this.workstationRepositoryProvider = workstationRepositoryProvider;
    assert chapterRepositoryProvider != null;
    this.chapterRepositoryProvider = chapterRepositoryProvider;
    assert prefManagerProvider != null;
    this.prefManagerProvider = prefManagerProvider;
    assert sciilAPIProvider != null;
    this.sciilAPIProvider = sciilAPIProvider;
  }

  @Override
  public QuestionsPresenter get() {
    return MembersInjectors.injectMembers(
        questionsPresenterMembersInjector,
        new QuestionsPresenter(
            answerRepositoryProvider.get(),
            auditRepositoryProvider.get(),
            questionRepositoryProvider.get(),
            workstationRepositoryProvider.get(),
            chapterRepositoryProvider.get(),
            prefManagerProvider.get(),
            sciilAPIProvider.get()));
  }

  public static Factory<QuestionsPresenter> create(
      MembersInjector<QuestionsPresenter> questionsPresenterMembersInjector,
      Provider<AnswerRepository> answerRepositoryProvider,
      Provider<AuditRepository> auditRepositoryProvider,
      Provider<QuestionRepository> questionRepositoryProvider,
      Provider<WorkstationRepository> workstationRepositoryProvider,
      Provider<ChapterRepository> chapterRepositoryProvider,
      Provider<PrefManager> prefManagerProvider,
      Provider<SciilAPI> sciilAPIProvider) {
    return new QuestionsPresenter_Factory(
        questionsPresenterMembersInjector,
        answerRepositoryProvider,
        auditRepositoryProvider,
        questionRepositoryProvider,
        workstationRepositoryProvider,
        chapterRepositoryProvider,
        prefManagerProvider,
        sciilAPIProvider);
  }
}
