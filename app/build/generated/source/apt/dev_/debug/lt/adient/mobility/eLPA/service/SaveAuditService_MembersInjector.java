// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package lt.adient.mobility.eLPA.service;

import android.app.NotificationManager;
import dagger.MembersInjector;
import javax.inject.Provider;
import lt.adient.mobility.eLPA.database.AnswerRepository;
import lt.adient.mobility.eLPA.database.AuditRepository;
import lt.adient.mobility.eLPA.database.ChapterRepository;
import lt.adient.mobility.eLPA.utils.PrefManager;
import lt.adient.mobility.eLPA.utils.Translator;
import lt.adient.mobility.eLPA.ws.SciilAPI;

public final class SaveAuditService_MembersInjector implements MembersInjector<SaveAuditService> {
  private final Provider<SciilAPI> sciilAPIProvider;

  private final Provider<AuditRepository> auditRepositoryProvider;

  private final Provider<AnswerRepository> answerRepositoryProvider;

  private final Provider<ChapterRepository> chapterRepositoryProvider;

  private final Provider<PrefManager> prefManagerProvider;

  private final Provider<NotificationManager> notificationManagerProvider;

  private final Provider<Translator> translatorProvider;

  public SaveAuditService_MembersInjector(
      Provider<SciilAPI> sciilAPIProvider,
      Provider<AuditRepository> auditRepositoryProvider,
      Provider<AnswerRepository> answerRepositoryProvider,
      Provider<ChapterRepository> chapterRepositoryProvider,
      Provider<PrefManager> prefManagerProvider,
      Provider<NotificationManager> notificationManagerProvider,
      Provider<Translator> translatorProvider) {
    assert sciilAPIProvider != null;
    this.sciilAPIProvider = sciilAPIProvider;
    assert auditRepositoryProvider != null;
    this.auditRepositoryProvider = auditRepositoryProvider;
    assert answerRepositoryProvider != null;
    this.answerRepositoryProvider = answerRepositoryProvider;
    assert chapterRepositoryProvider != null;
    this.chapterRepositoryProvider = chapterRepositoryProvider;
    assert prefManagerProvider != null;
    this.prefManagerProvider = prefManagerProvider;
    assert notificationManagerProvider != null;
    this.notificationManagerProvider = notificationManagerProvider;
    assert translatorProvider != null;
    this.translatorProvider = translatorProvider;
  }

  public static MembersInjector<SaveAuditService> create(
      Provider<SciilAPI> sciilAPIProvider,
      Provider<AuditRepository> auditRepositoryProvider,
      Provider<AnswerRepository> answerRepositoryProvider,
      Provider<ChapterRepository> chapterRepositoryProvider,
      Provider<PrefManager> prefManagerProvider,
      Provider<NotificationManager> notificationManagerProvider,
      Provider<Translator> translatorProvider) {
    return new SaveAuditService_MembersInjector(
        sciilAPIProvider,
        auditRepositoryProvider,
        answerRepositoryProvider,
        chapterRepositoryProvider,
        prefManagerProvider,
        notificationManagerProvider,
        translatorProvider);
  }

  @Override
  public void injectMembers(SaveAuditService instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.sciilAPI = sciilAPIProvider.get();
    instance.auditRepository = auditRepositoryProvider.get();
    instance.answerRepository = answerRepositoryProvider.get();
    instance.chapterRepository = chapterRepositoryProvider.get();
    instance.prefManager = prefManagerProvider.get();
    instance.notificationManager = notificationManagerProvider.get();
    instance.translator = translatorProvider.get();
  }

  public static void injectSciilAPI(
      SaveAuditService instance, Provider<SciilAPI> sciilAPIProvider) {
    instance.sciilAPI = sciilAPIProvider.get();
  }

  public static void injectAuditRepository(
      SaveAuditService instance, Provider<AuditRepository> auditRepositoryProvider) {
    instance.auditRepository = auditRepositoryProvider.get();
  }

  public static void injectAnswerRepository(
      SaveAuditService instance, Provider<AnswerRepository> answerRepositoryProvider) {
    instance.answerRepository = answerRepositoryProvider.get();
  }

  public static void injectChapterRepository(
      SaveAuditService instance, Provider<ChapterRepository> chapterRepositoryProvider) {
    instance.chapterRepository = chapterRepositoryProvider.get();
  }

  public static void injectPrefManager(
      SaveAuditService instance, Provider<PrefManager> prefManagerProvider) {
    instance.prefManager = prefManagerProvider.get();
  }

  public static void injectNotificationManager(
      SaveAuditService instance, Provider<NotificationManager> notificationManagerProvider) {
    instance.notificationManager = notificationManagerProvider.get();
  }

  public static void injectTranslator(
      SaveAuditService instance, Provider<Translator> translatorProvider) {
    instance.translator = translatorProvider.get();
  }
}
