// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package lt.adient.mobility.eLPA.activity.auditList;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import lt.adient.mobility.eLPA.database.AuditRepository;
import lt.adient.mobility.eLPA.utils.PrefManager;
import lt.adient.mobility.eLPA.ws.SciilAPI;

public final class AuditListPresenter_Factory implements Factory<AuditListPresenter> {
  private final MembersInjector<AuditListPresenter> auditListPresenterMembersInjector;

  private final Provider<PrefManager> prefManagerProvider;

  private final Provider<AuditRepository> auditRepositoryProvider;

  private final Provider<SciilAPI> sciilAPIProvider;

  public AuditListPresenter_Factory(
      MembersInjector<AuditListPresenter> auditListPresenterMembersInjector,
      Provider<PrefManager> prefManagerProvider,
      Provider<AuditRepository> auditRepositoryProvider,
      Provider<SciilAPI> sciilAPIProvider) {
    assert auditListPresenterMembersInjector != null;
    this.auditListPresenterMembersInjector = auditListPresenterMembersInjector;
    assert prefManagerProvider != null;
    this.prefManagerProvider = prefManagerProvider;
    assert auditRepositoryProvider != null;
    this.auditRepositoryProvider = auditRepositoryProvider;
    assert sciilAPIProvider != null;
    this.sciilAPIProvider = sciilAPIProvider;
  }

  @Override
  public AuditListPresenter get() {
    return MembersInjectors.injectMembers(
        auditListPresenterMembersInjector,
        new AuditListPresenter(
            prefManagerProvider.get(), auditRepositoryProvider.get(), sciilAPIProvider.get()));
  }

  public static Factory<AuditListPresenter> create(
      MembersInjector<AuditListPresenter> auditListPresenterMembersInjector,
      Provider<PrefManager> prefManagerProvider,
      Provider<AuditRepository> auditRepositoryProvider,
      Provider<SciilAPI> sciilAPIProvider) {
    return new AuditListPresenter_Factory(
        auditListPresenterMembersInjector,
        prefManagerProvider,
        auditRepositoryProvider,
        sciilAPIProvider);
  }
}
