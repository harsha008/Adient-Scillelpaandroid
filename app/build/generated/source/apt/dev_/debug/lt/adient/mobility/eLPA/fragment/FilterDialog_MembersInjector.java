// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package lt.adient.mobility.eLPA.fragment;

import dagger.MembersInjector;
import javax.inject.Provider;
import lt.adient.mobility.eLPA.database.UserRepository;
import lt.adient.mobility.eLPA.database.WorkstationRepository;
import lt.adient.mobility.eLPA.utils.PrefManager;
import lt.adient.mobility.eLPA.utils.Translator;

public final class FilterDialog_MembersInjector implements MembersInjector<FilterDialog> {
  private final Provider<Translator> translatorProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<WorkstationRepository> workstationRepositoryProvider;

  private final Provider<PrefManager> prefManagerProvider;

  public FilterDialog_MembersInjector(
      Provider<Translator> translatorProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<WorkstationRepository> workstationRepositoryProvider,
      Provider<PrefManager> prefManagerProvider) {
    assert translatorProvider != null;
    this.translatorProvider = translatorProvider;
    assert userRepositoryProvider != null;
    this.userRepositoryProvider = userRepositoryProvider;
    assert workstationRepositoryProvider != null;
    this.workstationRepositoryProvider = workstationRepositoryProvider;
    assert prefManagerProvider != null;
    this.prefManagerProvider = prefManagerProvider;
  }

  public static MembersInjector<FilterDialog> create(
      Provider<Translator> translatorProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<WorkstationRepository> workstationRepositoryProvider,
      Provider<PrefManager> prefManagerProvider) {
    return new FilterDialog_MembersInjector(
        translatorProvider,
        userRepositoryProvider,
        workstationRepositoryProvider,
        prefManagerProvider);
  }

  @Override
  public void injectMembers(FilterDialog instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.translator = translatorProvider.get();
    instance.userRepository = userRepositoryProvider.get();
    instance.workstationRepository = workstationRepositoryProvider.get();
    instance.prefManager = prefManagerProvider.get();
  }

  public static void injectTranslator(
      FilterDialog instance, Provider<Translator> translatorProvider) {
    instance.translator = translatorProvider.get();
  }

  public static void injectUserRepository(
      FilterDialog instance, Provider<UserRepository> userRepositoryProvider) {
    instance.userRepository = userRepositoryProvider.get();
  }

  public static void injectWorkstationRepository(
      FilterDialog instance, Provider<WorkstationRepository> workstationRepositoryProvider) {
    instance.workstationRepository = workstationRepositoryProvider.get();
  }

  public static void injectPrefManager(
      FilterDialog instance, Provider<PrefManager> prefManagerProvider) {
    instance.prefManager = prefManagerProvider.get();
  }
}
