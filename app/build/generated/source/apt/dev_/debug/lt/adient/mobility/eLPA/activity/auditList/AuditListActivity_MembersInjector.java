// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package lt.adient.mobility.eLPA.activity.auditList;

import dagger.MembersInjector;
import javax.inject.Provider;
import lt.adient.mobility.eLPA.utils.PrefManager;
import lt.adient.mobility.eLPA.utils.Translator;

public final class AuditListActivity_MembersInjector implements MembersInjector<AuditListActivity> {
  private final Provider<AuditListPresenter> presenterProvider;

  private final Provider<Translator> translatorProvider;

  private final Provider<PrefManager> prefManagerProvider;

  public AuditListActivity_MembersInjector(
      Provider<AuditListPresenter> presenterProvider,
      Provider<Translator> translatorProvider,
      Provider<PrefManager> prefManagerProvider) {
    assert presenterProvider != null;
    this.presenterProvider = presenterProvider;
    assert translatorProvider != null;
    this.translatorProvider = translatorProvider;
    assert prefManagerProvider != null;
    this.prefManagerProvider = prefManagerProvider;
  }

  public static MembersInjector<AuditListActivity> create(
      Provider<AuditListPresenter> presenterProvider,
      Provider<Translator> translatorProvider,
      Provider<PrefManager> prefManagerProvider) {
    return new AuditListActivity_MembersInjector(
        presenterProvider, translatorProvider, prefManagerProvider);
  }

  @Override
  public void injectMembers(AuditListActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    lt.adient.mobility.eLPA.mvp.MvpActivity_MembersInjector.injectPresenter(
        instance, presenterProvider);
    instance.translator = translatorProvider.get();
    instance.prefManager = prefManagerProvider.get();
  }

  public static void injectTranslator(
      AuditListActivity instance, Provider<Translator> translatorProvider) {
    instance.translator = translatorProvider.get();
  }

  public static void injectPrefManager(
      AuditListActivity instance, Provider<PrefManager> prefManagerProvider) {
    instance.prefManager = prefManagerProvider.get();
  }
}
