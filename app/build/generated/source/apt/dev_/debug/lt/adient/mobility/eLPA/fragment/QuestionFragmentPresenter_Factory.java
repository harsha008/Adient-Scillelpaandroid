// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package lt.adient.mobility.eLPA.fragment;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import java.io.File;
import javax.inject.Provider;
import lt.adient.mobility.eLPA.database.AnswerRepository;
import lt.adient.mobility.eLPA.database.ChapterRepository;
import lt.adient.mobility.eLPA.database.QuestionRepository;
import lt.adient.mobility.eLPA.utils.PrefManager;

public final class QuestionFragmentPresenter_Factory implements Factory<QuestionFragmentPresenter> {
  private final MembersInjector<QuestionFragmentPresenter> questionFragmentPresenterMembersInjector;

  private final Provider<PrefManager> prefManagerProvider;

  private final Provider<File> storageDirProvider;

  private final Provider<ChapterRepository> chapterRepositoryProvider;

  private final Provider<AnswerRepository> answerRepositoryProvider;

  private final Provider<QuestionRepository> questionRepositoryProvider;

  public QuestionFragmentPresenter_Factory(
      MembersInjector<QuestionFragmentPresenter> questionFragmentPresenterMembersInjector,
      Provider<PrefManager> prefManagerProvider,
      Provider<File> storageDirProvider,
      Provider<ChapterRepository> chapterRepositoryProvider,
      Provider<AnswerRepository> answerRepositoryProvider,
      Provider<QuestionRepository> questionRepositoryProvider) {
    assert questionFragmentPresenterMembersInjector != null;
    this.questionFragmentPresenterMembersInjector = questionFragmentPresenterMembersInjector;
    assert prefManagerProvider != null;
    this.prefManagerProvider = prefManagerProvider;
    assert storageDirProvider != null;
    this.storageDirProvider = storageDirProvider;
    assert chapterRepositoryProvider != null;
    this.chapterRepositoryProvider = chapterRepositoryProvider;
    assert answerRepositoryProvider != null;
    this.answerRepositoryProvider = answerRepositoryProvider;
    assert questionRepositoryProvider != null;
    this.questionRepositoryProvider = questionRepositoryProvider;
  }

  @Override
  public QuestionFragmentPresenter get() {
    return MembersInjectors.injectMembers(
        questionFragmentPresenterMembersInjector,
        new QuestionFragmentPresenter(
            prefManagerProvider.get(),
            storageDirProvider.get(),
            chapterRepositoryProvider.get(),
            answerRepositoryProvider.get(),
            questionRepositoryProvider.get()));
  }

  public static Factory<QuestionFragmentPresenter> create(
      MembersInjector<QuestionFragmentPresenter> questionFragmentPresenterMembersInjector,
      Provider<PrefManager> prefManagerProvider,
      Provider<File> storageDirProvider,
      Provider<ChapterRepository> chapterRepositoryProvider,
      Provider<AnswerRepository> answerRepositoryProvider,
      Provider<QuestionRepository> questionRepositoryProvider) {
    return new QuestionFragmentPresenter_Factory(
        questionFragmentPresenterMembersInjector,
        prefManagerProvider,
        storageDirProvider,
        chapterRepositoryProvider,
        answerRepositoryProvider,
        questionRepositoryProvider);
  }
}
